# -*- coding: utf-8 -*-
"""JogoDaVelhaFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g_UVP5OoYrBS06V60177mpZ0LoN_3We-
"""

# Classe para o jogo da velha
class JogoDaVelha:
    # Inicializador da classe
    def __init__(self):
        # Cria um tabuleiro 3x3 com espaços vazios
        self.tabuleiro = [[" " for _ in range(3)] for _ in range(3)]
        # Define o jogador inicial como "X"
        self.jogador_atual = "X"

    # Método para exibir o tabuleiro
    def exibir_tabuleiro(self):
        for linha in self.tabuleiro:
            print("|".join(linha))  # Exibe cada linha do tabuleiro
            print("-" * 5)  # Exibe uma linha divisória

    # Método para realizar um movimento
    def fazer_movimento(self, linha, coluna):
        # Verifica se a célula escolhida está vazia
        if self.tabuleiro[linha][coluna] == " ":
            # Marca a célula com o símbolo do jogador atual
            self.tabuleiro[linha][coluna] = self.jogador_atual
            return True
        else:
            return False  # Retorna falso se a célula não estiver vazia

    # Método para verificar se há um vencedor
    def verificar_vencedor(self):
        # Verifica todas as linhas, colunas e diagonais
        for i in range(3):
            if self.tabuleiro[i][0] == self.tabuleiro[i][1] == self.tabuleiro[i][2] != " ":
                return self.tabuleiro[i][0]
            if self.tabuleiro[0][i] == self.tabuleiro[1][i] == self.tabuleiro[2][i] != " ":
                return self.tabuleiro[0][i]

        if self.tabuleiro[0][0] == self.tabuleiro[1][1] == self.tabuleiro[2][2] != " ":
            return self.tabuleiro[0][0]

        if self.tabuleiro[0][2] == self.tabuleiro[1][1] == self.tabuleiro[2][0] != " ":
            return self.tabuleiro[0][2]

        return None  # Retorna None se não houver vencedor

    # Método para verificar se o jogo terminou em empate
    def verificar_empate(self):
        # Verifica se todas as células do tabuleiro estão preenchidas
        return all(all(celula != " " for celula in linha) for linha in self.tabuleiro)

    # Método para alternar o jogador
    def alternar_jogador(self):
        # Alterna entre "X" e "O"
        self.jogador_atual = "O" if self.jogador_atual == "X" else "X"

# Classe para a IA do jogo da velha, herda da classe JogoDaVelha
class JogoDaVelhaAI(JogoDaVelha):
    # Método Minimax para encontrar a melhor jogada
    def minimax(self, profundidade, e_maximizador, alfa, beta):
        # Primeiro, verifica se há um vencedor ou empate
        vencedor = self.verificar_vencedor()
        if vencedor == "X":
            return -10 + profundidade  # Retorna uma pontuação negativa para vitória de X
        elif vencedor == "O":
            return 10 - profundidade  # Retorna uma pontuação positiva para vitória de O
        elif self.verificar_empate():
            return 0  # Retorna 0 para empate

        # Se é a vez do maximizador (IA)
        if e_maximizador:
            melhor_pontuacao = -float('inf')
            # Explora todas as células vazias
            for i in range(3):
                for j in range(3):
                    if self.tabuleiro[i][j] == " ":
                        self.tabuleiro[i][j] = "O"  # Faz um movimento temporário
                        # Chama recursivamente o Minimax, alternando para o minimizador
                        pontuacao = self.minimax(profundidade + 1, False, alfa, beta)
                        self.tabuleiro[i][j] = " "  # Desfaz o movimento
                        # Atualiza a melhor pontuação e os valores de alfa e beta
                        melhor_pontuacao = max(melhor_pontuacao, pontuacao)
                        alfa = max(alfa, pontuacao)
                        # Poda alfa-beta
                        if beta <= alfa:
                            break
            return melhor_pontuacao
        else:
            # A lógica é similar para o minimizador, mas tenta minimizar a pontuação
            melhor_pontuacao = float('inf')
            for i in range(3):
                for j in range(3):
                    if self.tabuleiro[i][j] == " ":
                        self.tabuleiro[i][j] = "X"
                        pontuacao = self.minimax(profundidade + 1, True, alfa, beta)
                        self.tabuleiro[i][j] = " "
                        melhor_pontuacao = min(melhor_pontuacao, pontuacao)
                        beta = min(beta, pontuacao)
                        if beta <= alfa:
                            break
            return melhor_pontuacao

    # Método para encontrar o melhor movimento da IA
    def encontrar_melhor_movimento(self):
        melhor_pontuacao = -float('inf')
        melhor_movimento = (0, 0)
        alfa = -float('inf')
        beta = float('inf')
        # Explora todas as células vazias para encontrar o melhor movimento
        for i in range(3):
            for j in range(3):
                if self.tabuleiro[i][j] == " ":
                    self.tabuleiro[i][j] = "O"
                    pontuacao = self.minimax(0, False, alfa, beta)
                    self.tabuleiro[i][j] = " "
                    if pontuacao > melhor_pontuacao:
                        melhor_pontuacao = pontuacao
                        melhor_movimento = (i, j)
        return melhor_movimento

    # Método para jogar contra a IA
    def jogar_contra_ai(self):
        while True:
            self.exibir_tabuleiro()
            # Jogador humano
            if self.jogador_atual == "X":
                print("Vez do jogador X:")
                linha = int(input("Escolha a linha (0-2): "))
                coluna = int(input("Escolha a coluna (0-2): "))
                sucesso = self.fazer_movimento(linha, coluna)
            else:
                # Jogada da IA
                print("Vez da IA (O):")
                linha, coluna = self.encontrar_melhor_movimento()
                sucesso = self.fazer_movimento(linha, coluna)
                print(f"IA escolheu linha {linha}, coluna {coluna}")

            if sucesso:
                vencedor = self.verificar_vencedor()
                if vencedor:
                    self.exibir_tabuleiro()
                    print(f"Jogador {vencedor} venceu!")
                    break
                elif self.verificar_empate():
                    self.exibir_tabuleiro()
                    print("Empate!")
                    break
                else:
                    self.alternar_jogador()
            else:
                print("Movimento inválido, tente novamente.")

jogo = JogoDaVelhaAI()
jogo.jogar_contra_ai()